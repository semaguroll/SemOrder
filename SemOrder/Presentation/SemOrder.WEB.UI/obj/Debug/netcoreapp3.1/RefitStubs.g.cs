// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using SemOrder.WEB.UI.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace SemOrder.WEB.UI.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace SemOrder.WEB.UI.APIs
{
    using global::Refit;
    using global::SemOrder.Common.DTOs.Login;
    using global::SemOrder.Common.DTOs.User;
    using global::SemOrder.Common.Models;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAccountApi : IAccountApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAccountApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<WebApiResponse<UserResponse>> IAccountApi.Login(LoginRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(LoginRequest) });
            return (Task<WebApiResponse<UserResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<WebApiResponse<UserResponse>> IAccountApi.RefreshToken(RefreshToken request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("RefreshToken", new Type[] { typeof(RefreshToken) });
            return (Task<WebApiResponse<UserResponse>>)func(Client, arguments);
        }
    }
}

namespace SemOrder.WEB.UI.APIs
{
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::SemOrder.Common.DTOs.Category;
    using global::SemOrder.Common.Models;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICategoryApi : ICategoryApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICategoryApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<CategoryResponse>>>> ICategoryApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<CategoryResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<CategoryResponse>>> ICategoryApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<CategoryResponse>>> ICategoryApi.Add(CategoryRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Add", new Type[] { typeof(CategoryRequest) });
            return (Task<ActionResult<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<CategoryResponse>>> ICategoryApi.Update(Guid id, CategoryRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(CategoryRequest) });
            return (Task<ActionResult<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> ICategoryApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<CategoryResponse>>>> ICategoryApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<CategoryResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> ICategoryApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }
    }
}

namespace SemOrder.WEB.UI.APIs
{
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::SemOrder.Common.DTOs.Food;
    using global::SemOrder.Common.Models;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIFoodApi : IFoodApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIFoodApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<FoodResponse>>>> IFoodApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<FoodResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<FoodResponse>>> IFoodApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<FoodResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<FoodResponse>>> IFoodApi.Add(FoodRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Add", new Type[] { typeof(FoodRequest) });
            return (Task<ActionResult<WebApiResponse<FoodResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<FoodResponse>>> IFoodApi.Update(Guid id, FoodRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(FoodRequest) });
            return (Task<ActionResult<WebApiResponse<FoodResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IFoodApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<FoodResponse>>>> IFoodApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<FoodResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IFoodApi.Activate()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }
    }
}

namespace SemOrder.WEB.UI.APIs
{
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::SemOrder.Common.DTOs.Order;
    using global::SemOrder.Common.Models;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIOrderApi : IOrderApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIOrderApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<OrderResponse>>>> IOrderApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<OrderResponse>>> IOrderApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<OrderResponse>>> IOrderApi.Add(OrderRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Add", new Type[] { typeof(OrderRequest) });
            return (Task<ActionResult<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<OrderResponse>>> IOrderApi.Update(Guid id, OrderRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(OrderRequest) });
            return (Task<ActionResult<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IOrderApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<OrderResponse>>>> IOrderApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IOrderApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IOrderApi.Inactivate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Inactivate", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }
    }
}

namespace SemOrder.WEB.UI.APIs
{
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::SemOrder.Common.DTOs.Reservation;
    using global::SemOrder.Common.Models;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReservationApi : IReservationApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReservationApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<ReservationResponse>>>> IReservationApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<ReservationResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<ReservationResponse>>> IReservationApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<ReservationResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<ReservationResponse>>> IReservationApi.Add(ReservationRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Add", new Type[] { typeof(ReservationRequest) });
            return (Task<ActionResult<WebApiResponse<ReservationResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<ReservationResponse>>> IReservationApi.Update(Guid id, ReservationRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(ReservationRequest) });
            return (Task<ActionResult<WebApiResponse<ReservationResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IReservationApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<ReservationResponse>>>> IReservationApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<ReservationResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IReservationApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> IReservationApi.Inactivate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Inactivate", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }
    }
}

namespace SemOrder.WEB.UI.APIs
{
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::SemOrder.Common.DTOs.Table;
    using global::SemOrder.Common.Models;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITableApi : ITableApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITableApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<TableRequest>>>> ITableApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<TableRequest>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<TableRequest>>> ITableApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<TableRequest>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<TableRequest>>> ITableApi.Add(TableRequest tableRequest)
        {
            var arguments = new object[] { tableRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Add", new Type[] { typeof(TableRequest) });
            return (Task<ActionResult<WebApiResponse<TableRequest>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<TableRequest>>> ITableApi.Update(Guid id, TableRequest tableRequest)
        {
            var arguments = new object[] { id, tableRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", new Type[] { typeof(Guid), typeof(TableRequest) });
            return (Task<ActionResult<WebApiResponse<TableRequest>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> ITableApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<List<TableRequest>>>> ITableApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ActionResult<WebApiResponse<List<TableRequest>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> ITableApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActionResult<WebApiResponse<bool>>> ITableApi.Inactive(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Inactive", new Type[] { typeof(Guid) });
            return (Task<ActionResult<WebApiResponse<bool>>>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
